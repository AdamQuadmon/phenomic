{"head":{"title":"How to offer offline browsing experience with Phenomic","description":"What if users that already visit your website once can access it when they are offline, without a internet connection? Guess what, Phenomic…"},"body":"<p><em>What if users that already visit your website once can access it when they are\noffline, without a internet connection?</em></p>\n<p>Guess what, <strong>Phenomic supports offline browsing out of the box.</strong>\nIt's very easy to offer an offline experience to your users.\nYou just have to turn a flag on.</p>\n<p>There are currently two different technologies to enable offline experience.</p>\n<h2 id=\"appcache\"><a href=\"#appcache\"></a>AppCache</h2>\n<p>Appcache is the oldest way to offer offline supports but it's a bit brutal since\nyou can only choose what to save when the website opens.\nAll modern browsers support Appcache, including IE 10.</p>\n<ul>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/appcache/beginner/\">Learn about AppCache</a></li>\n<li><a href=\"http://caniuse.com/#search=appcache\">AppCache browser support from caniuse</a></li>\n</ul>\n<h2 id=\"service-worker\"><a href=\"#service-worker\"></a>Service Worker</h2>\n<p>⚠️ <strong>Service workers only works when using <em>HTTPS</em>, for security reasons.</strong>\n<em>Having modified network requests wide open to man in the middle attacks would\nbe really bad</em>.\nAn exception exists for <code>http://localhost</code> to help you during development.</p>\n<p>Service Worker are a specific Web worker that allows more flexible behavior\nthan Appcache.\nFor example, you can easily cache a single HTML entry point with\nCSS and JavaScript files at the start, and save for offline usage all other\nrequested content on demand.</p>\n<ul>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/service-worker/introduction/\">Learn about Service Worker</a></li>\n<li><a href=\"http://caniuse.com/#search=service-worker\">Service worker browser support from caniuse</a></li>\n</ul>\n<p>⚠️ <strong>Notice</strong></p>\n<blockquote>\n<p>If you use AppCache and Service Worker on a page, browsers that don’t support\nService Worker but do support AppCache will use that,\nand <strong>browsers that support both will ignore the AppCache and let\nService Worker take over</strong>.</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Registering_your_worker\">from MDN</a></li>\n</ul>\n</blockquote>\n<h3 id=\"network-first-cache-as-fallback\"><a href=\"#network-first-cache-as-fallback\"></a>Network first, cache as fallback</h3>\n<p>⚠️ To always offer up to date and fresh content, we choose to use a\n\"network first\" approach. Cache will only be used as fallback (eg: no internet\naccess).</p>\n<h2 id=\"how-to-enable-offline-support-for-phenomic\"><a href=\"#how-to-enable-offline-support-for-phenomic\"></a>How to enable offline support for Phenomic?</h2>\n<p>To enable this feature, add an <code>offline</code> field to <code>package.json</code> under\n<code>phenomic</code> section.</p>\n<pre><code class=\"language-js\">{\n  // ...\n  \"phenomic\": {\n    \"offline\": true\n  }\n  // ...\n}\n</code></pre>\n<p>Available values are:</p>\n<h3 id=\"offline-false\"><a href=\"#offline-false\"></a><code>\"offline\": false</code></h3>\n<p>Default value.\nDisable <code>offline</code> support.</p>\n<h3 id=\"offline-true\"><a href=\"#offline-true\"></a><code>\"offline\": true</code></h3>\n<p>Use default configuration (see below) which will cache all resources\ngenerated by the build process\n(except the <code>assets</code> folder, which will only be cached <strong>on demand</strong>).</p>\n<h3 id=\"offline---object--\"><a href=\"#offline---object--\"></a><code>\"offline\": { /* Object */ }</code></h3>\n<p>An object is accepted and must contain 3 keys.\nPlease be aware that you don't need to define all of 3 keys.\nThey will be defined with their default values.</p>\n<h4 id=\"serviceworker-boolean--true\"><a href=\"#serviceworker-boolean--true\"></a><code>serviceWorker: boolean = true</code></h4>\n<p>Enable/Disable Service Worker separately</p>\n<h4 id=\"appcache-boolean--true---key-boolean\"><a href=\"#appcache-boolean--true---key-boolean\"></a><code>appcache: boolean = true | { [key]: boolean}</code></h4>\n<p>Enable/Disable AppCache separately. You can also provide an object to choose\nwhat to cache from the <code>cachePatterns</code> (see below).\nHere is the default value:</p>\n<pre><code class=\"language-js\">appcache: {\n  // By default, this only cache the onInstall + afterInstall patterns\n  onInstall: true,\n  afterInstall: true,\n  // onDemand: cannot be emulated (so cached) with appcache\n},\n</code></pre>\n<h4 id=\"cachepatterns--key-arraystring-\"><a href=\"#cachepatterns--key-arraystring-\"></a><code>cachePatterns: { [key]: Array&#x3C;string> }</code>:</h4>\n<p>By default cache all content generated by the build,\nexcept HTML files (which are useless if JavaScript is on - a single HTML\nis cached and is used as a bootstrap for the JavaScript client code).</p>\n<p>You can define your own glob patterns to match files to cache.\nHere is the default value</p>\n<pre><code class=\"language-js\">cachePatterns: {\n  // cache the App Shell when Service Worker is installed\n  onInstall: [ \"index.html\", \"phenomic.*\" ],\n  // cache all known content after the Service worker has been installed\n  afterInstall: [ \"**\", \":assets:\" ],\n  // cache all other content on demand\n  onDemand: [ ],\n  // excludes dotfiles, sourcemaps files and HTML files (only one is enough for\n  // offline usage)\n  excludes: [ \"**/.*\", \"**/*.map\", \"**/*.html\" ],\n},\n</code></pre>\n<p>⚠️ <strong>Some special strings</strong></p>\n<ul>\n<li><code>:assets:</code> can be used to catch all assets in your <code>assets</code> folder\n(not handled by webpack).</li>\n<li><code>:rest:</code> can be used to catch all unused files (in other patterns).</li>\n</ul>\n<p>Phenomic uses <a href=\"https://www.npmjs.com/package/globby\">globby</a> for matching files\nin <code>dist</code> folder.</p>\n<p>Checkout <a href=\"https://www.npmjs.com/package/globby\">globby documentation for more information</a></p>\n<p>When you will build your website and you may notice some new files in <code>dist</code>\nfolder such as <code>manifest.appcache</code>, <code>sw.js</code>\n(depending on the options you provided).</p>\n<p>⚠️ <strong>Note</strong>: AppCache support will not be enabled in development mode to\navoid the pain it can cause.</p>\n<hr>\n<h2 id=\"faq\"><a href=\"#faq\"></a>FAQ</h2>\n<h3 id=\"how-can-i-provide-my-own-service-worker-logic\"><a href=\"#how-can-i-provide-my-own-service-worker-logic\"></a>How can I provide my own Service Worker logic?</h3>\n<p>Under the hood, Phenomic uses the webpack\n<a href=\"https://github.com/NekR/offline-plugin\">offline-plugin</a>, so you can just use\nthis one directly in your webpack configuration with your own options.\nFor even more flexibility, you can check\n<a href=\"https://github.com/GoogleChrome/sw-precache\">sw-precache</a>\nor\n<a href=\"https://github.com/GoogleChrome/sw-toolbox\">sw-toolbox</a></p>\n<h3 id=\"can-you-show-me-some-useful-glob-patterns-\"><a href=\"#can-you-show-me-some-useful-glob-patterns-\"></a>Can you show me some useful glob patterns ?</h3>\n<p>Here are some useful patterns that should covers most use cases\n(along with the default patterns)</p>\n<h4 id=\"cache-everything-initially\"><a href=\"#cache-everything-initially\"></a>Cache everything initially</h4>\n<p>This is the default behavior, just use <code>\"offline\": true,</code>.</p>\n<h2 id=\"only-cache-stuff-on-demand\"><a href=\"#only-cache-stuff-on-demand\"></a>Only cache stuff on demand</h2>\n<pre><code class=\"language-js\">cachePatterns: {\n  afterInstall: [],\n  onDemand: [ \"**\", \":assets:\" ],\n  // for other keys, default values will be used\n},\n</code></pre>\n<h4 id=\"only-cache-the-app-shell\"><a href=\"#only-cache-the-app-shell\"></a>Only cache the \"App Shell\"</h4>\n<pre><code class=\"language-js\">cachePatterns: {\n  // app shell is cached by default onInstall\n  // so we just need to remove patterns for others keys\n  afterInstall: [],\n  onDemand: [],\n},\n</code></pre>\n<h4 id=\"only-cache-app-shell-and-markdown-content-on-install-not-bundled-assets\"><a href=\"#only-cache-app-shell-and-markdown-content-on-install-not-bundled-assets\"></a>Only cache App Shell and markdown content on install, not bundled assets</h4>\n<pre><code class=\"language-js\">cachePatterns: {\n  afterInstall: [ \"**/*.json\" ], // reminder: markdown are transformed as json files\n  onDemand: [ \":rest:\", \":assets:\" ], // will catch all others results on demand\n  // for other keys, default values will be used\n},\n</code></pre>\n","rawBody":"\n_What if users that already visit your website once can access it when they are\noffline, without a internet connection?_\n\nGuess what, **Phenomic supports offline browsing out of the box.**\nIt's very easy to offer an offline experience to your users.\nYou just have to turn a flag on.\n\nThere are currently two different technologies to enable offline experience.\n\n## AppCache\n\nAppcache is the oldest way to offer offline supports but it's a bit brutal since\nyou can only choose what to save when the website opens.\nAll modern browsers support Appcache, including IE 10.\n\n- [Learn about AppCache](http://www.html5rocks.com/en/tutorials/appcache/beginner/)\n- [AppCache browser support from caniuse](http://caniuse.com/#search=appcache)\n\n## Service Worker\n\n⚠️ **Service workers only works when using _HTTPS_, for security reasons.**\n_Having modified network requests wide open to man in the middle attacks would\nbe really bad_.\nAn exception exists for ``http://localhost`` to help you during development.\n\nService Worker are a specific Web worker that allows more flexible behavior\nthan Appcache.\nFor example, you can easily cache a single HTML entry point with\nCSS and JavaScript files at the start, and save for offline usage all other\nrequested content on demand.\n\n- [Learn about Service Worker](http://www.html5rocks.com/en/tutorials/service-worker/introduction/)\n- [Service worker browser support from caniuse](http://caniuse.com/#search=service-worker)\n\n⚠️ **Notice**\n\n> If you use AppCache and Service Worker on a page, browsers that don’t support\n> Service Worker but do support AppCache will use that,\n> and **browsers that support both will ignore the AppCache and let\n> Service Worker take over**.\n> - [from MDN](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Registering_your_worker)\n\n### Network first, cache as fallback\n\n⚠️ To always offer up to date and fresh content, we choose to use a\n\"network first\" approach. Cache will only be used as fallback (eg: no internet\naccess).\n\n## How to enable offline support for Phenomic?\n\nTo enable this feature, add an ``offline`` field to ``package.json`` under\n``phenomic`` section.\n\n```js\n{\n  // ...\n  \"phenomic\": {\n    \"offline\": true\n  }\n  // ...\n}\n```\n\nAvailable values are:\n\n### ``\"offline\": false``\n\nDefault value.\nDisable `offline` support.\n\n### ``\"offline\": true``\n\nUse default configuration (see below) which will cache all resources\ngenerated by the build process\n(except the ``assets`` folder, which will only be cached **on demand**).\n\n### ``\"offline\": { /* Object */ }``\n\nAn object is accepted and must contain 3 keys.\nPlease be aware that you don't need to define all of 3 keys.\nThey will be defined with their default values.\n\n#### `serviceWorker: boolean = true`\n\nEnable/Disable Service Worker separately\n\n#### `appcache: boolean = true | { [key]: boolean}`\n\nEnable/Disable AppCache separately. You can also provide an object to choose\nwhat to cache from the ``cachePatterns`` (see below).\nHere is the default value:\n\n```js\nappcache: {\n  // By default, this only cache the onInstall + afterInstall patterns\n  onInstall: true,\n  afterInstall: true,\n  // onDemand: cannot be emulated (so cached) with appcache\n},\n```\n\n#### `cachePatterns: { [key]: Array<string> }`:\n\nBy default cache all content generated by the build,\nexcept HTML files (which are useless if JavaScript is on - a single HTML\nis cached and is used as a bootstrap for the JavaScript client code).\n\nYou can define your own glob patterns to match files to cache.\nHere is the default value\n\n```js\ncachePatterns: {\n  // cache the App Shell when Service Worker is installed\n  onInstall: [ \"index.html\", \"phenomic.*\" ],\n  // cache all known content after the Service worker has been installed\n  afterInstall: [ \"**\", \":assets:\" ],\n  // cache all other content on demand\n  onDemand: [ ],\n  // excludes dotfiles, sourcemaps files and HTML files (only one is enough for\n  // offline usage)\n  excludes: [ \"**/.*\", \"**/*.map\", \"**/*.html\" ],\n},\n```\n\n⚠️ **Some special strings**\n\n- ``:assets:`` can be used to catch all assets in your ``assets`` folder\n  (not handled by webpack).\n- ``:rest:`` can be used to catch all unused files (in other patterns).\n\nPhenomic uses [globby](https://www.npmjs.com/package/globby) for matching files\nin ``dist`` folder.\n\nCheckout [globby documentation for more information](https://www.npmjs.com/package/globby)\n\nWhen you will build your website and you may notice some new files in ``dist``\nfolder such as ``manifest.appcache``, ``sw.js``\n(depending on the options you provided).\n\n⚠️ **Note**: AppCache support will not be enabled in development mode to\navoid the pain it can cause.\n\n---\n\n## FAQ\n\n### How can I provide my own Service Worker logic?\n\nUnder the hood, Phenomic uses the webpack\n[offline-plugin](https://github.com/NekR/offline-plugin), so you can just use\nthis one directly in your webpack configuration with your own options.\nFor even more flexibility, you can check\n[sw-precache](https://github.com/GoogleChrome/sw-precache)\nor\n[sw-toolbox](https://github.com/GoogleChrome/sw-toolbox)\n\n\n### Can you show me some useful glob patterns ?\n\nHere are some useful patterns that should covers most use cases\n(along with the default patterns)\n\n#### Cache everything initially\n\nThis is the default behavior, just use ``\"offline\": true,``.\n\n## Only cache stuff on demand\n\n```js\ncachePatterns: {\n  afterInstall: [],\n  onDemand: [ \"**\", \":assets:\" ],\n  // for other keys, default values will be used\n},\n```\n\n#### Only cache the \"App Shell\"\n\n```js\ncachePatterns: {\n  // app shell is cached by default onInstall\n  // so we just need to remove patterns for others keys\n  afterInstall: [],\n  onDemand: [],\n},\n```\n\n#### Only cache App Shell and markdown content on install, not bundled assets\n\n```js\ncachePatterns: {\n  afterInstall: [ \"**/*.json\" ], // reminder: markdown are transformed as json files\n  onDemand: [ \":rest:\", \":assets:\" ], // will catch all others results on demand\n  // for other keys, default values will be used\n},\n```\n","raw":"---\ntitle: How to offer offline browsing experience with Phenomic\n---\n\n_What if users that already visit your website once can access it when they are\noffline, without a internet connection?_\n\nGuess what, **Phenomic supports offline browsing out of the box.**\nIt's very easy to offer an offline experience to your users.\nYou just have to turn a flag on.\n\nThere are currently two different technologies to enable offline experience.\n\n## AppCache\n\nAppcache is the oldest way to offer offline supports but it's a bit brutal since\nyou can only choose what to save when the website opens.\nAll modern browsers support Appcache, including IE 10.\n\n- [Learn about AppCache](http://www.html5rocks.com/en/tutorials/appcache/beginner/)\n- [AppCache browser support from caniuse](http://caniuse.com/#search=appcache)\n\n## Service Worker\n\n⚠️ **Service workers only works when using _HTTPS_, for security reasons.**\n_Having modified network requests wide open to man in the middle attacks would\nbe really bad_.\nAn exception exists for ``http://localhost`` to help you during development.\n\nService Worker are a specific Web worker that allows more flexible behavior\nthan Appcache.\nFor example, you can easily cache a single HTML entry point with\nCSS and JavaScript files at the start, and save for offline usage all other\nrequested content on demand.\n\n- [Learn about Service Worker](http://www.html5rocks.com/en/tutorials/service-worker/introduction/)\n- [Service worker browser support from caniuse](http://caniuse.com/#search=service-worker)\n\n⚠️ **Notice**\n\n> If you use AppCache and Service Worker on a page, browsers that don’t support\n> Service Worker but do support AppCache will use that,\n> and **browsers that support both will ignore the AppCache and let\n> Service Worker take over**.\n> - [from MDN](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Registering_your_worker)\n\n### Network first, cache as fallback\n\n⚠️ To always offer up to date and fresh content, we choose to use a\n\"network first\" approach. Cache will only be used as fallback (eg: no internet\naccess).\n\n## How to enable offline support for Phenomic?\n\nTo enable this feature, add an ``offline`` field to ``package.json`` under\n``phenomic`` section.\n\n```js\n{\n  // ...\n  \"phenomic\": {\n    \"offline\": true\n  }\n  // ...\n}\n```\n\nAvailable values are:\n\n### ``\"offline\": false``\n\nDefault value.\nDisable `offline` support.\n\n### ``\"offline\": true``\n\nUse default configuration (see below) which will cache all resources\ngenerated by the build process\n(except the ``assets`` folder, which will only be cached **on demand**).\n\n### ``\"offline\": { /* Object */ }``\n\nAn object is accepted and must contain 3 keys.\nPlease be aware that you don't need to define all of 3 keys.\nThey will be defined with their default values.\n\n#### `serviceWorker: boolean = true`\n\nEnable/Disable Service Worker separately\n\n#### `appcache: boolean = true | { [key]: boolean}`\n\nEnable/Disable AppCache separately. You can also provide an object to choose\nwhat to cache from the ``cachePatterns`` (see below).\nHere is the default value:\n\n```js\nappcache: {\n  // By default, this only cache the onInstall + afterInstall patterns\n  onInstall: true,\n  afterInstall: true,\n  // onDemand: cannot be emulated (so cached) with appcache\n},\n```\n\n#### `cachePatterns: { [key]: Array<string> }`:\n\nBy default cache all content generated by the build,\nexcept HTML files (which are useless if JavaScript is on - a single HTML\nis cached and is used as a bootstrap for the JavaScript client code).\n\nYou can define your own glob patterns to match files to cache.\nHere is the default value\n\n```js\ncachePatterns: {\n  // cache the App Shell when Service Worker is installed\n  onInstall: [ \"index.html\", \"phenomic.*\" ],\n  // cache all known content after the Service worker has been installed\n  afterInstall: [ \"**\", \":assets:\" ],\n  // cache all other content on demand\n  onDemand: [ ],\n  // excludes dotfiles, sourcemaps files and HTML files (only one is enough for\n  // offline usage)\n  excludes: [ \"**/.*\", \"**/*.map\", \"**/*.html\" ],\n},\n```\n\n⚠️ **Some special strings**\n\n- ``:assets:`` can be used to catch all assets in your ``assets`` folder\n  (not handled by webpack).\n- ``:rest:`` can be used to catch all unused files (in other patterns).\n\nPhenomic uses [globby](https://www.npmjs.com/package/globby) for matching files\nin ``dist`` folder.\n\nCheckout [globby documentation for more information](https://www.npmjs.com/package/globby)\n\nWhen you will build your website and you may notice some new files in ``dist``\nfolder such as ``manifest.appcache``, ``sw.js``\n(depending on the options you provided).\n\n⚠️ **Note**: AppCache support will not be enabled in development mode to\navoid the pain it can cause.\n\n---\n\n## FAQ\n\n### How can I provide my own Service Worker logic?\n\nUnder the hood, Phenomic uses the webpack\n[offline-plugin](https://github.com/NekR/offline-plugin), so you can just use\nthis one directly in your webpack configuration with your own options.\nFor even more flexibility, you can check\n[sw-precache](https://github.com/GoogleChrome/sw-precache)\nor\n[sw-toolbox](https://github.com/GoogleChrome/sw-toolbox)\n\n\n### Can you show me some useful glob patterns ?\n\nHere are some useful patterns that should covers most use cases\n(along with the default patterns)\n\n#### Cache everything initially\n\nThis is the default behavior, just use ``\"offline\": true,``.\n\n## Only cache stuff on demand\n\n```js\ncachePatterns: {\n  afterInstall: [],\n  onDemand: [ \"**\", \":assets:\" ],\n  // for other keys, default values will be used\n},\n```\n\n#### Only cache the \"App Shell\"\n\n```js\ncachePatterns: {\n  // app shell is cached by default onInstall\n  // so we just need to remove patterns for others keys\n  afterInstall: [],\n  onDemand: [],\n},\n```\n\n#### Only cache App Shell and markdown content on install, not bundled assets\n\n```js\ncachePatterns: {\n  afterInstall: [ \"**/*.json\" ], // reminder: markdown are transformed as json files\n  onDemand: [ \":rest:\", \":assets:\" ], // will catch all others results on demand\n  // for other keys, default values will be used\n},\n```\n","__filename":"docs/advanced/offline-browsing.md","__url":"/docs/advanced/offline-browsing/","__resourceUrl":"/docs/advanced/offline-browsing/index.html","__dataUrl":"/docs/advanced/offline-browsing/index.html.dd77c34786f06ebf17a487ffb63936a5.json"}