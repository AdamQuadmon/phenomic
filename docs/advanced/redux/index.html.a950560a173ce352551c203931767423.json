{"head":{"title":"Advanced usage of Redux","incomplete":true,"description":"Adding custom Redux reducers Here is an example of a store that will allow you to add your own reducers, with hot loading support. It isâ€¦"},"body":"<h2 id=\"adding-custom-redux-reducers\"><a href=\"#adding-custom-redux-reducers\"></a>Adding custom Redux reducers</h2>\n<p>Here is an example of a store that will allow you to add\nyour own reducers, <em>with hot loading support</em>. It is based on the\ndefault boilerplate.</p>\n<pre><code class=\"language-js\">import { combineReducers } from \"redux\"\nimport createStore from \"phenomic/lib/redux/createStore\"\nimport * as phenomicReducers from \"phenomic/lib/redux/modules\"\nimport * as reducers from \"app/redux\"\n\nconst store = createStore(\n  // here we combine phenomic required reducers and your custom ones\n  combineReducers({\n    ...phenomicReducers,\n    ...reducers,\n  }),\n  { ...(typeof window !== \"undefined\") &#x26;&#x26; window.__INITIAL_STATE__ },\n)\n\n// webpack hot loading\nif (module.hot) {\n  // enable hot module replacement for reducers\n  module.hot.accept([\n    // \"phenomic/lib/redux/modules\",\n    // will not be updated since it's a lib :)\n    // but will still needs to be required\n\n    // hot load your reducers\n    \"app/redux/modules\",\n  ], () => {\n    const updatedReducer = combineReducers({\n      // we still need to combine all reducers\n      ...require(\"phenomic/lib/redux/modules\"),\n      ...require(\"app/redux/modules\"),\n    })\n    store.replaceReducer(updatedReducer)\n  })\n}\n\nexport default store\n</code></pre>\n<h2 id=\"adding-custom-middlewares-and-store-enhancers-to-redux-store\"><a href=\"#adding-custom-middlewares-and-store-enhancers-to-redux-store\"></a>Adding custom middlewares and store enhancers to Redux store</h2>\n<p><code>phenomic/lib/redux/createStore</code> accepts two extra parameters that\nallow you to pass custom middlewares and store enhancers.</p>\n<p>Here is an example of adding\n<a href=\"https://github.com/fcomb/redux-logger\">redux-logger</a> and\n<a href=\"https://github.com/treasure-data/redux-search\">redux-search</a>\nto Redux store:</p>\n<pre><code class=\"language-js\">import { combineReducers } from \"redux\"\nimport createStore from \"phenomic/lib/redux/createStore\"\nimport * as phenomicReducers from \"phenomic/lib/redux/modules\"\nimport { reducer as searchReducer, reduxSearch } from \"redux-search\"\nimport createLogger from \"redux-logger\"\n\nconst extraMiddlewares = [ createLogger() ]\nconst extraStoreEnhancers = [\n  reduxSearch({\n    resourceIndexes: {\n      books: ['author', 'title']\n    },\n    resourceSelector: (resourceName, state) => {\n      return state.resources.get(resourceName)\n    }\n  })\n]\n\nconst store = createStore(\n  combineReducers({\n    ...phenomicReducers,\n    ...{\n      search: searchReducer\n    }\n  }),\n  { ...(typeof window !== \"undefined\") &#x26;&#x26; window.__INITIAL_STATE__ },\n  extraMiddlewares,\n  extraStoreEnhancers,\n)\n\nexport default store\n</code></pre>\n","rawBody":"\n## Adding custom Redux reducers\n\nHere is an example of a store that will allow you to add\nyour own reducers, _with hot loading support_. It is based on the\ndefault boilerplate.\n\n```js\nimport { combineReducers } from \"redux\"\nimport createStore from \"phenomic/lib/redux/createStore\"\nimport * as phenomicReducers from \"phenomic/lib/redux/modules\"\nimport * as reducers from \"app/redux\"\n\nconst store = createStore(\n  // here we combine phenomic required reducers and your custom ones\n  combineReducers({\n    ...phenomicReducers,\n    ...reducers,\n  }),\n  { ...(typeof window !== \"undefined\") && window.__INITIAL_STATE__ },\n)\n\n// webpack hot loading\nif (module.hot) {\n  // enable hot module replacement for reducers\n  module.hot.accept([\n    // \"phenomic/lib/redux/modules\",\n    // will not be updated since it's a lib :)\n    // but will still needs to be required\n\n    // hot load your reducers\n    \"app/redux/modules\",\n  ], () => {\n    const updatedReducer = combineReducers({\n      // we still need to combine all reducers\n      ...require(\"phenomic/lib/redux/modules\"),\n      ...require(\"app/redux/modules\"),\n    })\n    store.replaceReducer(updatedReducer)\n  })\n}\n\nexport default store\n```\n## Adding custom middlewares and store enhancers to Redux store\n\n`phenomic/lib/redux/createStore` accepts two extra parameters that\nallow you to pass custom middlewares and store enhancers.\n\nHere is an example of adding\n[redux-logger](https://github.com/fcomb/redux-logger) and\n[redux-search](https://github.com/treasure-data/redux-search)\nto Redux store:\n\n```js\nimport { combineReducers } from \"redux\"\nimport createStore from \"phenomic/lib/redux/createStore\"\nimport * as phenomicReducers from \"phenomic/lib/redux/modules\"\nimport { reducer as searchReducer, reduxSearch } from \"redux-search\"\nimport createLogger from \"redux-logger\"\n\nconst extraMiddlewares = [ createLogger() ]\nconst extraStoreEnhancers = [\n  reduxSearch({\n    resourceIndexes: {\n      books: ['author', 'title']\n    },\n    resourceSelector: (resourceName, state) => {\n      return state.resources.get(resourceName)\n    }\n  })\n]\n\nconst store = createStore(\n  combineReducers({\n    ...phenomicReducers,\n    ...{\n      search: searchReducer\n    }\n  }),\n  { ...(typeof window !== \"undefined\") && window.__INITIAL_STATE__ },\n  extraMiddlewares,\n  extraStoreEnhancers,\n)\n\nexport default store\n```\n","raw":"---\ntitle: Advanced usage of Redux\nincomplete: true\n---\n\n## Adding custom Redux reducers\n\nHere is an example of a store that will allow you to add\nyour own reducers, _with hot loading support_. It is based on the\ndefault boilerplate.\n\n```js\nimport { combineReducers } from \"redux\"\nimport createStore from \"phenomic/lib/redux/createStore\"\nimport * as phenomicReducers from \"phenomic/lib/redux/modules\"\nimport * as reducers from \"app/redux\"\n\nconst store = createStore(\n  // here we combine phenomic required reducers and your custom ones\n  combineReducers({\n    ...phenomicReducers,\n    ...reducers,\n  }),\n  { ...(typeof window !== \"undefined\") && window.__INITIAL_STATE__ },\n)\n\n// webpack hot loading\nif (module.hot) {\n  // enable hot module replacement for reducers\n  module.hot.accept([\n    // \"phenomic/lib/redux/modules\",\n    // will not be updated since it's a lib :)\n    // but will still needs to be required\n\n    // hot load your reducers\n    \"app/redux/modules\",\n  ], () => {\n    const updatedReducer = combineReducers({\n      // we still need to combine all reducers\n      ...require(\"phenomic/lib/redux/modules\"),\n      ...require(\"app/redux/modules\"),\n    })\n    store.replaceReducer(updatedReducer)\n  })\n}\n\nexport default store\n```\n## Adding custom middlewares and store enhancers to Redux store\n\n`phenomic/lib/redux/createStore` accepts two extra parameters that\nallow you to pass custom middlewares and store enhancers.\n\nHere is an example of adding\n[redux-logger](https://github.com/fcomb/redux-logger) and\n[redux-search](https://github.com/treasure-data/redux-search)\nto Redux store:\n\n```js\nimport { combineReducers } from \"redux\"\nimport createStore from \"phenomic/lib/redux/createStore\"\nimport * as phenomicReducers from \"phenomic/lib/redux/modules\"\nimport { reducer as searchReducer, reduxSearch } from \"redux-search\"\nimport createLogger from \"redux-logger\"\n\nconst extraMiddlewares = [ createLogger() ]\nconst extraStoreEnhancers = [\n  reduxSearch({\n    resourceIndexes: {\n      books: ['author', 'title']\n    },\n    resourceSelector: (resourceName, state) => {\n      return state.resources.get(resourceName)\n    }\n  })\n]\n\nconst store = createStore(\n  combineReducers({\n    ...phenomicReducers,\n    ...{\n      search: searchReducer\n    }\n  }),\n  { ...(typeof window !== \"undefined\") && window.__INITIAL_STATE__ },\n  extraMiddlewares,\n  extraStoreEnhancers,\n)\n\nexport default store\n```\n","__filename":"docs/advanced/redux.md","__url":"/docs/advanced/redux/","__resourceUrl":"/docs/advanced/redux/index.html","__dataUrl":"/docs/advanced/redux/index.html.a950560a173ce352551c203931767423.json"}